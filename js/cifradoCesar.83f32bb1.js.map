{"version":3,"file":"js/cifradoCesar.83f32bb1.js","mappings":"weA0EA,MAAMA,GAAeC,EAAAA,EAAAA,IAAI,IACnBC,GAAgBD,EAAAA,EAAAA,IAAI,IACpBE,GAAQF,EAAAA,EAAAA,IAAI,GAEZG,EAAmBC,GAChB,gBAAgBC,KAAKD,GAGxBE,EAAQ,CACZP,aAAc,CACZQ,SAAQ,KACRJ,oBAIEK,GAAKC,EAAAA,EAAAA,IAAaH,EAAO,CAAEP,iBAE3BW,EAAaC,UACbH,EAAGJ,MAAMQ,UACXJ,EAAGJ,MAAMS,QAEX,EAIIC,EAAUA,KACdb,EAAcG,MAAQW,EAAahB,EAAaK,MAAOF,EAAME,MAAM,EAI/DY,EAAUA,KACdf,EAAcG,MAAQW,EAAahB,EAAaK,OAAQF,EAAME,MAAM,EAIhEW,EAAeA,CAACE,EAAMf,KAC1B,MAAMgB,EAAW,6BACjB,OAAOD,EACJE,MAAM,IACNC,KAAKC,IACJ,MAAMC,EAAcD,IAASA,EAAKE,cAC5BC,EAAYH,EAAKI,cACjBC,EAAQR,EAASS,QAAQH,GAC/B,IAAe,IAAXE,EACF,OAAOL,EAET,IAAIO,GAAYF,EAAQxB,GAASgB,EAASW,OACtCD,EAAW,IAAGA,EAAWV,EAASW,OAASD,GAC/C,MAAME,EAAcZ,EAASU,GAC7B,OAAON,EAAcQ,EAAYP,cAAgBO,CAAW,IAE7DC,KAAK,GAAG,EAIPC,EAAkBrB,UACtB,UACQsB,UAAUC,UAAUC,UAAUlC,EAAcG,OAClDgC,MAAM,gCACR,CAAE,MAAOC,GACPD,MAAM,2BACR,G,+pDClIF,MAAME,EAAc,EAEpB,O","sources":["webpack://computer_security/./src/views/CaesarCipherPage.vue","webpack://computer_security/./src/views/CaesarCipherPage.vue?0a73"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <form class=\"container-caeser\" @submit.prevent=\"submitForm\">\r\n      <h1 class=\"title\">Cifrado César</h1>\r\n\r\n      <div class=\"form-group\">\r\n        <label for=\"message\" class=\"form-label\"> Mensaje a cifrar: </label>\r\n        <input\r\n          v-model=\"inputMessage\"\r\n          id=\"message\"\r\n          type=\"text\"\r\n          autocomplete=\"off\"\r\n          placeholder=\"Ej. Hola esto es cifrado de cesar\"\r\n          class=\"form-control\"\r\n          :class=\"{\r\n            'form-error': $v.inputMessage.$invalid && inputMessage.length,\r\n          }\"\r\n        />\r\n        <span\r\n          :class=\"{ 'text-error': $v.inputMessage.$invalid }\"\r\n          v-show=\"$v.inputMessage.$invalid && inputMessage.length\"\r\n        >\r\n          Solo se permiten letras (A-Z y a-z)\r\n        </span>\r\n      </div>\r\n\r\n      <div class=\"form-group\">\r\n        <label for=\"shift\" class=\"form-label\">\r\n          Desplazamiento: {{ shift }}\r\n        </label>\r\n        <input\r\n          v-model.number=\"shift\"\r\n          type=\"range\"\r\n          min=\"1\"\r\n          max=\"25\"\r\n          id=\"shift\"\r\n          class=\"form-slider\"\r\n        />\r\n      </div>\r\n\r\n      <div class=\"form-group btn-group\">\r\n        <button\r\n          @click=\"encrypt\"\r\n          class=\"btn btn-primary\"\r\n          :class=\"{ disabled: $v.inputMessage.$invalid }\"\r\n          :disabled=\"$v.inputMessage.$invalid\"\r\n        >\r\n          Cifrar\r\n        </button>\r\n        <button @click=\"decrypt\" class=\"btn btn-texted\">Descifrar</button>\r\n      </div>\r\n    </form>\r\n    <div\r\n      v-show=\"outputMessage && !$v.inputMessage.$error\"\r\n      class=\"container-answer\"\r\n    >\r\n      <h3 class=\"title\">Texto cifrado:</h3>\r\n      <hr class=\"divider\" />\r\n      <p class=\"text-result\">\r\n        {{ outputMessage }}\r\n      </p>\r\n      <hr class=\"divider\" />\r\n      <button class=\"btn btn-texted btn-texted--link\" @click=\"copyToClipboard\">\r\n        Copiar mensaje\r\n      </button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from \"vue\";\r\nimport useVuelidate from \"@vuelidate/core\";\r\nimport { required } from \"@vuelidate/validators\";\r\n\r\nconst inputMessage = ref(\"\");\r\nconst outputMessage = ref(\"\");\r\nconst shift = ref(1);\r\n\r\nconst alphaWithSpaces = (value) => {\r\n  return /^[a-zA-Z\\s]*$/.test(value); // Permite letras y espacios\r\n};\r\n\r\nconst rules = {\r\n  inputMessage: {\r\n    required,\r\n    alphaWithSpaces,\r\n  },\r\n};\r\n\r\nconst $v = useVuelidate(rules, { inputMessage });\r\n\r\nconst submitForm = async () => {\r\n  if ($v.value.$invalid) {\r\n    $v.value.$touch();\r\n    return;\r\n  }\r\n};\r\n\r\n// Función para cifrar\r\nconst encrypt = () => {\r\n  outputMessage.value = caesarCipher(inputMessage.value, shift.value);\r\n};\r\n\r\n// Función para descifrar\r\nconst decrypt = () => {\r\n  outputMessage.value = caesarCipher(inputMessage.value, -shift.value);\r\n};\r\n\r\n// Lógica del cifrado César\r\nconst caesarCipher = (text, shift) => {\r\n  const alphabet = \"abcdefghijklmnopqrstuvwxyz\";\r\n  return text\r\n    .split(\"\")\r\n    .map((char) => {\r\n      const isUpperCase = char === char.toUpperCase();\r\n      const lowerChar = char.toLowerCase();\r\n      const index = alphabet.indexOf(lowerChar);\r\n      if (index === -1) {\r\n        return char; // No se altera si no es una letra\r\n      }\r\n      let newIndex = (index + shift) % alphabet.length;\r\n      if (newIndex < 0) newIndex = alphabet.length + newIndex;\r\n      const shiftedChar = alphabet[newIndex];\r\n      return isUpperCase ? shiftedChar.toUpperCase() : shiftedChar;\r\n    })\r\n    .join(\"\");\r\n};\r\n\r\n// Función para copiar al portapapeles\r\nconst copyToClipboard = async () => {\r\n  try {\r\n    await navigator.clipboard.writeText(outputMessage.value);\r\n    alert(\"Texto copiado al portapapeles\");\r\n  } catch (err) {\r\n    alert(\"Error al copiar el texto\");\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n/* Containers */\r\n\r\n/* .container{\r\n    min-height: 100vh;\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fit, minmax(35rem, 1fr));\r\n    place-content: center;\r\n    place-items: center;\r\n    margin-block: 2rem;\r\n  \r\n    gap: 3.2rem;\r\n  }\r\n  \r\n  @media (min-width: 768px){\r\n    .container{\r\n      grid-auto-flow: column;\r\n    }\r\n  }\r\n  \r\n  .container-caeser{\r\n    width: 35rem;\r\n    position: relative;\r\n  \r\n    background-color: #FFFFFF;\r\n    padding: 2.4rem;\r\n    border-radius: 4px;\r\n    overflow: hidden;\r\n  \r\n    display: grid;\r\n    gap: 2.4rem;\r\n  \r\n    box-shadow: 0 0 1rem -6px rgba(0,0,0,0.1);\r\n  }\r\n  \r\n  .container-caeser::before{\r\n    content: '';\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    background-color: #4361EE;\r\n    width: 100%;\r\n    height: 6px;\r\n  }\r\n  \r\n  .container-answer{\r\n    width: 35rem;\r\n    max-width: 40rem;\r\n    padding: 1.6rem;\r\n    \r\n    background-color: #FFFFFF;\r\n    box-shadow: 0 0 1.6rem -1.3rem rgba(0,0,0,0.1);\r\n    border-radius: 6px;\r\n    \r\n    display: grid;\r\n    place-self: center;\r\n    gap: 1.6rem;\r\n  }\r\n  \r\n  .container-answer:hover{\r\n    box-shadow: 0 0 1.6rem -1rem rgba(0,0,0,0.1);\r\n  }\r\n  \r\n  .container-answer > p{\r\n    font-weight: 300;\r\n  }\r\n  \r\n  .container-answer > h3{\r\n    text-align: start;\r\n  } */\r\n\r\n/* Forms */\r\n\r\n/* .form-group{\r\n    display: grid;\r\n    gap: 6px;\r\n  }\r\n  \r\n  .form-label{\r\n    color: #363939;\r\n  }\r\n  \r\n  .form-control{\r\n    border: 1px solid #D2D3D3;\r\n    border-radius: 4px;\r\n    font-size: 1.6rem;\r\n    padding: 1.2rem;\r\n  \r\n    font-family: 'Montserrat';\r\n    font-weight: 300;\r\n  }\r\n  \r\n  .form-control:hover{\r\n    border: 1px solid #B1B2B2;\r\n  }\r\n  \r\n  .btn-group{\r\n    display: grid;\r\n    grid-auto-flow: column;\r\n    grid-template-columns: repeat(2, auto);\r\n  } */\r\n\r\n/* Buttons */\r\n/* .btn{\r\n    border: none;\r\n    border-radius: 4px;\r\n    \r\n    padding: 1.2rem;\r\n    font-size: 1.6rem;\r\n    font-family: 'Lora';\r\n    \r\n    cursor: pointer;\r\n    transition: ease .3s;\r\n  }\r\n  \r\n  .btn-primary{\r\n    background-color: #4361EE;\r\n    color: #FFFFFF;\r\n  }\r\n  \r\n  .btn-primary:hover{\r\n    background-color: #2846D2;\r\n  }\r\n  \r\n  .btn-texted{\r\n    background-color: transparent;\r\n    color: #57595A;\r\n  }\r\n  \r\n  .btn-texted:hover{\r\n    background-color: #F6F6F6;\r\n    color: #363939;\r\n  }\r\n  \r\n  .btn-texted--link{\r\n    color: #4361EE;\r\n  }\r\n  \r\n  .btn-texted--link:hover{\r\n    color: #4361EE;\r\n    background-color: #E8ECFF;\r\n  }\r\n  \r\n  .disabled{\r\n    opacity: .5;\r\n    cursor: not-allowed;\r\n  } */\r\n\r\n/* Helpers */\r\n/* .title{\r\n    text-align: center;\r\n    font-family: 'Lora';\r\n    font-weight: 300;\r\n    color: #1F2223;\r\n  }\r\n  \r\n  .divider{\r\n    color: #f6f6f62d;\r\n  }\r\n  \r\n  .form-error{\r\n    border: 1px solid red;\r\n  }\r\n  \r\n  .form-error:hover{\r\n    border: 1px solid red;\r\n  }\r\n  \r\n  .text-error{\r\n    color: red;\r\n  } */\r\n</style>\r\n","import script from \"./CaesarCipherPage.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./CaesarCipherPage.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./CaesarCipherPage.vue?vue&type=style&index=0&id=0f8ec02c&lang=css\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["inputMessage","ref","outputMessage","shift","alphaWithSpaces","value","test","rules","required","$v","useVuelidate","submitForm","async","$invalid","$touch","encrypt","caesarCipher","decrypt","text","alphabet","split","map","char","isUpperCase","toUpperCase","lowerChar","toLowerCase","index","indexOf","newIndex","length","shiftedChar","join","copyToClipboard","navigator","clipboard","writeText","alert","err","__exports__"],"sourceRoot":""}